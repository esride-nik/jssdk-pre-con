import{ah as r,ao as M,bs as P,az as z,bt as g,bu as A,bv as O,bw as j,bx as k,au as L,by as $,bz as T,ai as d,ak as E,bA as S}from"./index-a1cac181.js";const J=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let a=class extends M{constructor(s){super(s),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=J.map(s=>new P({color:[s[0],s[1],s[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(s){this._enabled!==s&&(this._enabled=s,this.update())}update(){if(!this._enabled)return void this.clear();const s=e=>{if(e.label!=null)return e.label;let l=e.lij.toString();return e.loadPriority!=null&&(l+=` (${e.loadPriority})`),l},h=this.getTiles(),b=new Array,p=new Set((this._labels.size,this._labels.keys()));h.forEach((e,l)=>{const t=e.lij.toString();p.delete(t);const x=e.lij[0],u=e.geometry;if(this.enablePolygons&&!this._polygons.has(t)){const i=new z({geometry:u,symbol:this._symbols[x%this._symbols.length]});this._polygons.set(t,i),b.push(i)}if(this.enableLabels){const i=s(e),w=l/(h.length-1),c=S(0,200,w),_=S(20,6,w)/.75,m=e.loadPriority!=null&&e.loadPriority>=h.length,v=new g([c,m?0:c,m?0:c]),f=this.view.type==="3d"?()=>new A({verticalOffset:new O({screenLength:40/.75}),callout:new j({color:new g("white"),border:new k({color:new g("black")})}),symbolLayers:new L([new $({text:i,halo:{color:"white",size:1/.75},material:{color:v},size:_})])}):()=>new T({text:i,haloColor:"white",haloSize:1/.75,color:v,size:_}),n=this._labels.get(t);if(n){const o=f();n.symbol!=null&&JSON.stringify(o)===JSON.stringify(n.symbol)||(n.symbol=o)}else{const o=new z({geometry:u.extent.center,symbol:f()});this._labels.set(t,o),b.push(o)}}});const y=new Array;p.forEach(e=>{const l=this._polygons.get(e);l!=null&&(y.push(l),this._polygons.delete(e));const t=this._labels.get(e);t!=null&&(y.push(t),this._labels.delete(e))}),this.view.graphics.removeMany(y),this.view.graphics.addMany(b)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};r([d({constructOnly:!0})],a.prototype,"view",void 0),r([d({readOnly:!0})],a.prototype,"updating",void 0),r([d()],a.prototype,"enabled",null),a=r([E("esri.views.support.TileTreeDebugger")],a);export{a as d};
