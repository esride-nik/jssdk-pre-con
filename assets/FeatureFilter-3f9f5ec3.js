import{b7 as m,cR as u,aq as p,dO as c,dZ as _}from"./index-a1cac181.js";import{a as y,v as f,t as w}from"./QueryEngine-161e756d.js";import{b as I}from"./Query-8ec96004.js";import{I as b}from"./Pipeline-9d6cf83f.js";import"./WhereClause-94ad22d7.js";import"./TimeOnly-d19fd4d4.js";import"./UnknownTimeZone-ab7c6b01.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./utils-886070e6.js";import"./heatmapUtils-2351b1fb.js";import"./utils-5dc09d08.js";import"./generateRendererUtils-d73d141f.js";import"./FieldsIndex-6b49ca64.js";import"./StreamFeatureManager-5d1a3f88.js";import"./quickselect-29477ff4.js";import"./diffUtils-ef6bbcbf.js";import"./labelPoint-773cc97e.js";import"./ogcFeatureUtils-1801816f.js";import"./geojson-7adc8288.js";import"./date-294ce3fb.js";import"./clientSideDefaults-3df88923.js";import"./defaultsJSON-59981e75.js";import"./query-0260ec48.js";import"./pbfQueryUtils-13f6e3b7.js";import"./pbf-16158dc0.js";import"./queryZScale-f8e7b210.js";import"./createConnection-f9d069f8.js";import"./definitions-f7ca1c70.js";import"./enums-9d4f5c11.js";import"./number-e491b09e.js";import"./geohashUtils-77d8429b.js";const d=m.getLogger("esri.views.2d.layers.features.support.whereUtils"),g={getAttribute:(r,e)=>r.readAttribute(e)};async function T(r,e){try{const t=await u(r,e);if(!t.isStandardized){const i=new p("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",t);d.error(i)}return i=>{const s=i.readArcadeFeature();return t.testFeature(s,g)}}catch{return d.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",r),i=>!0}}const a=1,v=2;class ie{constructor(e){this._geometryBounds=c(),this._idToVisibility=new Map,this._serviceInfo=e}get hash(){return this._hash}check(e){return this._applyFilter(e)}clear(){const e=this._resetAllHiddenIds();return this.update(),{show:e,hide:[]}}invalidate(){this._idToVisibility.forEach((e,t)=>{this._idToVisibility.set(t,0)})}setKnownIds(e){for(const t of e)this._idToVisibility.set(t,a)}setTrue(e){const t=[],i=[],s=new Set(e);return this._idToVisibility.forEach((h,o)=>{const l=!!(this._idToVisibility.get(o)&a),n=s.has(o);!l&&n?t.push(o):l&&!n&&i.push(o),this._idToVisibility.set(o,n?a|v:0)}),{show:t,hide:i}}createQuery(){const{geometry:e,spatialRel:t,where:i,timeExtent:s,objectIds:h}=this;return I.fromJSON({geometry:e,spatialRel:t,where:i,timeExtent:s,objectIds:h})}async update(e,t){this._hash=JSON.stringify(e);const i=await y(e,null,t);await Promise.all([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(e){if(!(e!=null&&e.where))return this._clause=null,void(this.where=null);this._clause=await T(e.where,this._serviceInfo.fieldsIndex),this.where=e.where}_setIdFilter(e){this._idsToShow=(e==null?void 0:e.objectIds)&&new Set(e.objectIds),this._idsToHide=(e==null?void 0:e.hiddenIds)&&new Set(e.hiddenIds),this.objectIds=e==null?void 0:e.objectIds}async _setGeometryFilter(e){if(!(e!=null&&e.geometry))return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const t=e.geometry,i=e.spatialRel||"esriSpatialRelIntersects",s=await f(i,t,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);_(this._geometryBounds,t),this._spatialQueryOperator=s,this.geometry=t,this.spatialRel=i}_setTimeFilter(e){if(this.timeExtent=this._timeOperator=null,e==null?void 0:e.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=e.timeExtent,this._timeOperator=w(this._serviceInfo.timeInfo,e.timeExtent,b);else{const t=new p("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",e.timeExtent);m.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(t)}}_applyFilter(e){return this._filterByGeometry(e)&&this._filterById(e)&&this._filterByTime(e)&&this._filterByExpression(e)}_filterByExpression(e){return!this.where||this._clause(e)}_filterById(e){var t,i;return(!((t=this._idsToHide)!=null&&t.size)||!this._idsToHide.has(e.getObjectId()))&&(!((i=this._idsToShow)!=null&&i.size)||this._idsToShow.has(e.getObjectId()))}_filterByGeometry(e){if(!this.geometry)return!0;const t=e.readHydratedGeometry();return!!t&&this._spatialQueryOperator(t)}_filterByTime(e){return this._timeOperator==null||this._timeOperator(e)}_resetAllHiddenIds(){const e=[];return this._idToVisibility.forEach((t,i)=>{t&a||(this._idToVisibility.set(i,a),e.push(i))}),e}}export{ie as default};
